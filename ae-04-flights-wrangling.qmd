---
title: "AE 04: NYC flights + data wrangling"
author: "Isabel Ulrich"
---

```{r}
#| label: load-packages
#| message: false

library(tidyverse)
library(nycflights13)
```

## Exercise 1

**Your turn:** Fill in the blanks:

The `flights` data frame has `nrow(flights)` rows. Each row represents a flights.

## Exercise 2

**Your turn:** What are the names of the variables in `flights`.

```{r}
#| label: column-names

names(flights)
```

## Exercise 3 - `select()`

-   Make a data frame that only contains the variables `dep_delay` and `arr_delay`.

```{r}
#| label: select-vars

flights |>
  select(dep_delay, arr_delay)
```

-   Make a data frame that keeps every variable except `dep_delay`.

```{r}
#| label: exclude-vars

flights |>
  select(!dep_delay)
```

-   Make a data frame that includes all variables between `year` through `dep_delay` (inclusive). These are all variables that provide information about the departure of each flight.

```{r}
#| label: include-range

flights |>
  select(year:dep_delay)
```

-   Use the `select` helper `contains()` to make a data frame that includes the variables associated with the arrival, i.e., contains the string `"arr\_"` in the name.

```{r}
#| label: arr-vars

flights |>
  select(contains("arr_"))
```

## Exercise 4 - `slice()`

-   Display the first five rows of the `flights` data frame.

```{r}
#| label: slice

flights |>
  slice(1:5)
```

-   Display the last two rows of the `flights` data frame.

```{r}
#| label: last-two

flights |>
  slice(336775:336776)
```

## Exercise 5 - `arrange()`

-   Let's arrange the data by departure delay, so the flights with the shortest departure delays will be at the top of the data frame.

```{r}
#| label: arrange-delays

flights |>
  arrange(dep_delay)
```

-   Question: What does it mean for the `dep_delay` to have a negative value?
    -   The plane left before/ earlier then the scheduled departure time.
-   Arrange the data by descending departure delay, so the flights with the longest departure delays will be at the top.

```{r}
#| label: arrange-delays-desc

flights |>
  arrange(desc(dep_delay))
```

-   **Your turn:** Create a data frame that only includes the plane tail number (`tailnum`), carrier (`carrier`), and departure delay for the flight with the longest departure delay. What is the plane tail number (`tailnum`) for this flight?

```{r}
#| label: longest-delay

flights |>
  select(tailnum,carrier,dep_delay)|>
  filter(dep_delay>1300)
```

## Exercise 6 - `filter()`

-   Filter for all rows where the destination airport is RDU.

```{r}
#| label: rdu

flights |>
  filter(dest == "RDU")
```

-   Filter for all rows where the destination airport is RDU and the arrival delay is less than 0.

```{r}
#| label: rdu-ontime

flights |>
  filter(dest == "RDU", arr_delay < 0)
```

-   **Your turn:** Describe what the code is doing in words.

Takes the flight data frame and filters flights which destinations are "RDU" or "GSO" and so arrival and departure is early (ahead of schedule/ \<0)

```{r}
#| label: nc-early

flights |>
  filter(
    dest %in% c("RDU", "GSO"),
    arr_delay < 0 | dep_delay < 0
  )
```

**Hint:** Logical operators in R:

| operator      | definition                                               |
|:--------------|:---------------------------------------------------------|
| `<`           | is less than?                                            |
| `<=`          | is less than or equal to?                                |
| `>`           | is greater than?                                         |
| `>=`          | is greater than or equal to?                             |
| `==`          | is exactly equal to?                                     |
| `!=`          | is not equal to?                                         |
| `x & y`       | is x AND y?                                              |
| `x \| y`      | is x OR y?                                               |
| `is.na(x)`    | is x NA?                                                 |
| `!is.na(x)`   | is x not NA?                                             |
| `x %in% y`    | is x in y?                                               |
| `!(x %in% y)` | is x not in y?                                           |
| `!x`          | is not x? (only makes sense if `x` is `TRUE` or `FALSE`) |

## Exercise 7 - `count()`

-   Create a frequency table of the destination locations for flights from New York.

```{r}
#| label: count-dest

flights |>
    count(dest)
```

-   In which month was there the fewest number of flights? How many flights were there in that month?
    -   2 (February) Month: 24951 flights

```{r}
#| label: count-month

flights |>
    count(month) |>
    arrange(n)
```

-   **Your turn:** On which date (month + day) was there the largest number of flights? How many flights were there on that day?
    -   11 (November) Month, 27 day: 1014 flights

```{r}
#| label: count-date

flights |>
    count(month, day) |>
    arrange(desc(n))
```

## Exercise 8 - `mutate()`

-   Convert `air_time` (minutes in the air) to hours and then create a new variable, `mph`, the miles per hour of the flight.

```{r}
#| label: calculate-mph

flights |>
  mutate(
    air_time_minutes = air_time / 60,
    mph = distance / air_time_minutes) |>
    select(air_time, air_time_minutes, distance, mph)
```

-   **Your turn:** First, count the number of flights each month, and then calculate the proportion of flights in each month. What proportion of flights take place in July?
    -   0.5833...

```{r}
#| label: months-prop

flights |>
    count(month) |>
    mutate(prop = n/sum(n))
```

-   Create a new variable, `rdu_bound`, which indicates whether the flight is to RDU or not. Then, for each departure airport (`origin`), calculate what proportion of flights originating from that airport are to RDU.

```{r}
#| label: rdu-origin-prop

flights |>
  mutate(rdu_bound = if_else(dest == "RDU","Yes","No")) |>
  count(origin, rdu_bound)|>
  group_by(origin) |>
  mutate(prop = n/sum(n)) |>
  filter(rdu_bound == "Yes")




```

## Exercise 9 - `summarize()`

-   Find mean arrival delay for all flights.

```{r}
#| label: find-arrival-delay

flights |>
  summarize(mean_arr_delay =mean(arr_delay, na.rm = TRUE))
```

## Exercise 10 - `group_by()`

-   Find mean arrival delay for for each month.

```{r}
#| label: mean-arr-delay-month

flights |>
  group_by(month) |>
  summarize(mean_arr_delay =mean(arr_delay, na.rm = TRUE))
```

-   **Your turn:** What is the median departure delay for each airports around NYC (`origin`)? Which airport has the shortest median departure delay?
    -   LGA has shortest median departure delay of -3.

```{r}
#| label: median-dep-dely-origin

flights |>
  group_by(origin) |>
  summarize(median_dep_delay =median(dep_delay, na.rm = TRUE))
```

# Additional Practice

Try these on your own, either in class if you finish early, or after class.

1.  Create a new dataset that only contains flights that do not have a missing departure time. Include the columns `year`, `month`, `day`, `dep_time`, `dep_delay`, and `dep_delay_hours` (the departure delay in hours). *Hint: Note you may need to use `mutate()` to make one or more of these variables.*

```{r}
#| label: add-practice-1

# add code here
```

2.  For each airplane (uniquely identified by `tailnum`), use a `group_by()` paired with `summarize()` to find the sample size, mean, and standard deviation of flight distances. Then include only the top 5 and bottom 5 airplanes in terms of mean distance traveled per flight in the final data frame.

```{r}
#| label: add-practice-2

# add code here
```
